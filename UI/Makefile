#############################################################################
# Makefile for building: SmartCCTV_UI
# This is the skeleton makefile of the project.
# It is almost cross-platform except for some of the things which are
# labeled as FIXME (should be highlighted by any decent editor).
# These lines should be replaced by the corresopnding lines from the
# makefile that is generated by the qmake
#
# Instructions:
# 1. run        qmake SmartCCTV_UI.pro
#    qmake will generate another Makefile
#    It's called the system-dependent makefile
#    run that command in a different directory to avoid getting this
#    Makefile overridden.
#
# 2. Find all places in this skeleton makefile which are labeled as FIXME
#    inside the system-dependent makefile generated by qmake and copy
#    then over, replacing the corresponding text in the skeleton makefile
#
# 3. run        make
#    to build the project
#    Don't commit your own makefile tailored specifically to your system
#    only the skeleton makefile should be in the repo
#############################################################################

MAKEFILE      = Makefile

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_DEPRECATED_WARNINGS -DQT_NO_DEBUG -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES) -g
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES) -std=c++17 -g

# FIXME
# This is the path to the #includes header files of Qt.
# Change this according to the makefile generated when you run qmake.
# When you run qmake it will generate a Makefile. Copy and paste the INCPATH from that, replacing this line.
INCPATH       = -I. -isystem /usr/include/x86_64-linux-gnu/qt5 -isystem /usr/include/x86_64-linux-gnu/qt5/QtWidgets -isystem /usr/include/x86_64-linux-gnu/qt5/QtGui -isystem /usr/include/x86_64-linux-gnu/qt5/QtCore -I. -I. -I/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64

LINK          = g++ `pkg-config --cflags --libs opencv`
LFLAGS        = -Wl,-O1

# FIXME
# These are the installed libraries of Qt.
# Change this according to the makefile generated when you run qmake.
# When you run qmake it will generate a Makefile. Copy and paste the LIBS from that, replacing this line.
LIBS          = $(SUBLIBS) -L/usr/X11R6/lib64 -lQt5Widgets -lQt5Gui -lQt5Core -lGL -lpthread

ALL_LIBS      = $(LIBS) -lpthread -lrt `pkg-config opencv --cflags --libs`


DEL_FILE      = rm -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p
COPY          = cp -f
COPY_FILE     = cp -f
COPY_DIR      = cp -f -R
INSTALL_FILE  = install -m 644 -p
INSTALL_PROGRAM = install -m 755 -p
INSTALL_DIR   = cp -f -R
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
TAR           = tar -cf
COMPRESS      = gzip -9f
AR            = ar cqs
RANLIB        = 
SED           = sed
STRIP         = strip

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = ../camera_daemon.cpp \
		../high_level_cctv_daemon_apis.cpp \
		../low_level_cctv_daemon_apis.cpp \
		../write_message.cpp \
		main.cpp \
		mainwindow.cpp moc_mainwindow.cpp \
		humanFilter.cpp \
		camera.cpp
OBJECTS       = camera_daemon.o \
		high_level_cctv_daemon_apis.o \
		low_level_cctv_daemon_apis.o \
		write_message.o \
		main.o \
		mainwindow.o \
		moc_mainwindow.o \
		humanFilter.o \
		camera.o 

TARGET        = SmartCCTV_UI


first: all

####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

$(TARGET): ui_mainwindow.h $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(ALL_LIBS)



all: Makefile $(TARGET)


# FIXME
# I don't even know what this is!
# Change this according to the makefile generated when you run qmake.
# When you run qmake it will generate a Makefile. Copy and paste the dist from that, replacing these lines.

dist: distdir FORCE
	(cd `dirname $(DISTDIR)` && $(TAR) $(DISTNAME).tar $(DISTNAME) && $(COMPRESS) $(DISTNAME).tar) && $(MOVE) `dirname $(DISTDIR)`/$(DISTNAME).tar.gz . && $(DEL_FILE) -r $(DISTDIR)

distdir: FORCE
	@test -d $(DISTDIR) || mkdir -p $(DISTDIR)
	$(COPY_FILE) --parents $(DIST) $(DISTDIR)/
	$(COPY_FILE) --parents ../camera_daemon.h ../high_level_cctv_daemon_apis.h ../low_level_cctv_daemon_apis.h mainwindow.h $(DISTDIR)/
	$(COPY_FILE) --parents ../camera_daemon.cpp ../high_level_cctv_daemon_apis.cpp ../low_level_cctv_daemon_apis.cpp main.cpp mainwindow.cpp $(DISTDIR)/
	$(COPY_FILE) --parents mainwindow.ui $(DISTDIR)/


clean: compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

# FIXME
# I don't even know what this is!
# Change this according to the makefile generated when you run qmake.
# When you run qmake it will generate a Makefile.
# Copy and paste the entire Sub-libraries section, replacing everything until the Compile section.

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

check: first

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_moc_header_make_all: moc_mainwindow.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_mainwindow.cpp
moc_mainwindow.cpp: ../high_level_cctv_daemon_apis.h \
		mainwindow.h
	/usr/lib/x86_64-linux-gnu/qt5/bin/moc $(DEFINES) -I/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++-64 -I/home/konstantin/Documents/programming/SmartCCTV/UI -I/usr/include/x86_64-linux-gnu/qt5 -I/usr/include/x86_64-linux-gnu/qt5/QtWidgets -I/usr/include/x86_64-linux-gnu/qt5/QtGui -I/usr/include/x86_64-linux-gnu/qt5/QtCore -I/usr/include/c++/5 -I/usr/include/x86_64-linux-gnu/c++/5 -I/usr/include/c++/5/backward -I/usr/lib/gcc/x86_64-linux-gnu/5/include -I/usr/local/include -I/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed -I/usr/include/x86_64-linux-gnu -I/usr/include mainwindow.h -o moc_mainwindow.cpp

compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all: ui_mainwindow.h
compiler_uic_clean:
	-$(DEL_FILE) ui_mainwindow.h
ui_mainwindow.h: mainwindow.ui
	/usr/lib/x86_64-linux-gnu/qt5/bin/uic mainwindow.ui -o ui_mainwindow.h

compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean compiler_uic_clean 

####### Compile

write_message.o: ../write_message.cpp ../write_message.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o write_message.o ../write_message.cpp


high_level_cctv_daemon_apis.o: ../high_level_cctv_daemon_apis.cpp ../high_level_cctv_daemon_apis.h \
		../low_level_cctv_daemon_apis.h \
		../write_message.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o high_level_cctv_daemon_apis.o ../high_level_cctv_daemon_apis.cpp


low_level_cctv_daemon_apis.o: ../low_level_cctv_daemon_apis.cpp ../low_level_cctv_daemon_apis.h \
		../camera_daemon.h \
		../write_message.h \
		../camera.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) `pkg-config --cflags --libs opencv` -static-libstdc++ -o low_level_cctv_daemon_apis.o ../low_level_cctv_daemon_apis.cpp


main.o: main.cpp mainwindow.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

mainwindow.o: mainwindow.cpp mainwindow.h \
		ui_mainwindow.h \
		../high_level_cctv_daemon_apis.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mainwindow.o mainwindow.cpp

moc_mainwindow.o: moc_mainwindow.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_mainwindow.o moc_mainwindow.cpp
	
camera_daemon.o: ../camera_daemon.cpp ../camera_daemon.h \
	../camera.hpp \
	../humanFilter.hpp \
	../low_level_cctv_daemon_apis.h \
	../write_message.h
	g++ -c -std=c++17 -ggdb `pkg-config --cflags --libs opencv` -static-libstdc++ ../camera_daemon.cpp ../camera_daemon.h ../camera.cpp ../low_level_cctv_daemon_apis.h ../humanFilter.cpp 

	
####### Install



